{
  "address": "0x8B5Bb3D91A410706FC95d009DF622cb6f9C06BC9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zimaRouterAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5822168ac53467cf40ea80598faf5a53e78b96d07af815d8a79eebda74033562",
  "receipt": {
    "to": null,
    "from": "0xAAAA8C5867f5c44B6025688F481B34514e09fd8d",
    "contractAddress": "0x8B5Bb3D91A410706FC95d009DF622cb6f9C06BC9",
    "transactionIndex": 64,
    "gasUsed": "594440",
    "logsBloom": "0x
    "blockHash": "0xc367b2a4d0912b74d2d5fcb959912742b7d77ff9de3d117ffb8aa60092d5e238",
    "transactionHash": "0x5822168ac53467cf40ea80598faf5a53e78b96d07af815d8a79eebda74033562",
    "logs": [],
    "blockNumber": 10174028,
    "cumulativeGasUsed": "19078031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91043e64AB377E31A1D2E8FaA9d0ea2B694f6d0c"
  ],
  "numDeployments": 1,
  "solcInputHash": "886f34cd1191700a3a6414e5990e1476",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zimaRouterAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapExactTokensForETH(address,address,uint256,uint256,uint256)\":{\"notice\":\"USER INTERFACE *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Adapter.sol\":\"UniswapV2Adapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/UniswapV2Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/UniswapV2/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IAdapter.sol\\\";\\nimport \\\"./interfaces/IZimaRouter.sol\\\";\\n\\ncontract UniswapV2Adapter is IAdapter {\\n\\n  using SafeERC20 for IERC20;\\n\\n  IZimaRouter _zimaRouter;\\n  \\n  IUniswapV2Router02 _router;\\n\\n  constructor(address zimaRouterAddr) {\\n    _zimaRouter = IZimaRouter(zimaRouterAddr);\\n\\n    if(block.chainid == 1) {\\n      _router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    } else if(block.chainid == 5) {\\n      _router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    } else {\\n      revert(\\\"unsupported chain\\\");\\n    }\\n    \\n  }\\n\\n  receive() external payable{}\\n\\n  /** USER INTERFACE **/\\n\\n  function swapExactTokensForETH(\\n                                 address payable recipient,\\n                                 address tokenFrom,\\n                                 uint amountIn,\\n                                 uint amountOutMin,\\n                                 uint deadline\\n                                 ) external {\\n\\n    // Build the path\\n    address[] memory path = new address[](2);\\n    path[0] = tokenFrom;\\n    path[1] = _zimaRouter.WETH();\\n\\n    // Approve the router\\n    IERC20(tokenFrom).safeApprove(address(_router), amountIn);\\n    \\n    // Execute the swap\\n    _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                                                               amountIn,\\n                                                               amountOutMin,\\n                                                               path,\\n                                                               address(this),\\n                                                               deadline\\n                                                               );\\n\\n    // Collect the fee in ETH to `feeWallet` after executing swap\\n    _collectFee(recipient, address(this).balance);\\n\\n    // Send the full balance of eth to user\\n    (bool sent, bytes memory data) = recipient.call{value: address(this).balance}(\\\"\\\");\\n    require(sent, \\\"failed to collect fee\\\");\\n    \\n  }\\n  \\n  function swapExactETHForTokens(\\n                                 address recipient,\\n                                 address tokenTo,\\n                                 uint amountOutMin,\\n                                 uint deadline\\n                                 ) external payable {\\n\\n    // Store the full ETH amount sent by `recipient`\\n    uint amount = msg.value;\\n    \\n    // Collect the fee in ETH to `feeWallet` before executing swap\\n    _collectFee(recipient, amount);\\n\\n    // Build the path\\n    address[] memory path = new address[](2);\\n    path[0] = _zimaRouter.WETH();\\n    path[1] = tokenTo;\\n    \\n    // Execute the swap\\n    _router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n    value: address(this).balance}(\\n                                  amountOutMin,\\n                                  path,\\n                                  recipient,\\n                                  deadline\\n                                  );\\n  }\\n\\n  /** INTERNAL FUNCTIONS **/\\n\\n  function _collectFee(address recipient, uint ethAmount) internal returns(uint) {\\n    uint feeBps = _zimaRouter.feeBps(recipient);\\n    uint fee = ethAmount * feeBps / 10000;\\n    address payable feeWallet = _zimaRouter.feeWallet();\\n    (bool sent, bytes memory data) = feeWallet.call{value: fee}(\\\"\\\");\\n    require(sent, \\\"failed to collect fee\\\");\\n    return ethAmount - fee;\\n  }  \\n\\n  /// @notice Transfers token to sender if amount > 0\\n  /// @param token IERC20 token to transfer to sender\\n  /// @param amount Amount of token to transfer\\n  ///  @param recipient Address that will receive the tokens\\n  function _transfer(\\n                     IERC20 token,\\n                     uint256 amount,\\n                     address recipient\\n                     ) internal {\\n    if (amount > 0) {\\n      token.safeTransfer(recipient, amount);\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x07776dd627998a2c1a439fca315b06893851bac0d93ecf8d9f1726381fa04e76\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAdapter {\\n\\n  function swapExactTokensForETH(\\n                                 address payable recipient,\\n                                 address tokenTo,\\n                                 uint amountIn,\\n                                 uint amountOutMin,\\n                                 uint deadline\\n                                 ) external;\\n  \\n  function swapExactETHForTokens(\\n                                 address recipient,\\n                                 address tokenTo,\\n                                 uint amountOutMin,\\n                                 uint deadline\\n                                 ) external payable;\\n  \\n}\\n\",\"keccak256\":\"0xb2da6f8559bca585693c5dbdac4d45c534c50e0a97a31dbf3f24daa4d9ac5521\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IZimaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IZimaRouter {\\n\\n  event AddAdapter(uint adapterId, address adapter);\\n  event SetFeeWallet(address feeWallet);\\n  event Swap(\\n             address indexed account,\\n             address tokenFrom,\\n             uint amountFrom,\\n             address tokenTo,\\n             uint amountTo\\n             );\\n  \\n  /** ACCESS CONTROL FUNCTIONS **/\\n  \\n  function __setFeeWallet(address payable feeWallet_) external;\\n  function __addAdapter(uint adapterId, address adapterAddr) external;\\n\\n  /** USER INTERFACE **/\\n\\n  function swapExactTokensForETH(\\n                                 uint adapterId,\\n                                 address payable recipient,\\n                                 address tokenFrom,\\n                                 uint amountIn,\\n                                 uint amountOutMin,\\n                                 uint deadline\\n                                 ) external;\\n  \\n  function swapExactETHForTokens(\\n                                 uint adapterId,\\n                                 address recipient,\\n                                 address tokenTo,\\n                                 uint amountOutMin,\\n                                 uint deadline\\n                                 ) external payable;\\n  \\n  /** VIEW FUNCTIONS **/\\n\\n  function WETH() external view returns(address);\\n  function feeBps(address user) external view returns(uint);\\n  function feeWallet() external view returns(address payable);\\n  \\n}\\n\",\"keccak256\":\"0x8781a133e4d1a2ec1553516fbb42a0162b1db2f6b09824a8cce2a5d773a323a3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/UniswapV2/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x52dff8edf9675e968c2c21ab56399e8a48a1301a56b6d127fb76b586d10db8b5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/UniswapV2/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2265bf397a975ed4e07bb22484fe9c078df3d5bb0a9e6c6e3fff07ee3e87cbdd\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60803461010057601f610a0138819003918201601f19168301916001600160401b038311848410176101055780849260209460405283398101031261010057516001600160a01b0381169081900361010057600080546001600160a01b031990811690921790554660010361009c57737a250d5630b4cf539739df2c5dacb4c659f2488d9060015416176001555b6040516108e5908161011c8239f35b466005036100c757737a250d5630b4cf539739df2c5dacb4c659f2488d90600154161760015561008d565b60405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b21031b430b4b760791b6044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600090813560e01c806312d4b07c146103dc5763b1f0d840146100435750610011565b346103d85760a03660031901126103d8576001600160a01b03833581811692908390036103d45761007261050a565b94604480358351946100838661054a565b6002865260209885368b8901378161009a88610588565b9116809152848a838b54168851928380926315ab88c960e31b82525afa9081156103ca578a9161039d575b50826100d0896105ab565b911690528160015416908315801561032c575b156102cb578651918b83019063095ea7b360e01b825260248401528486840152858352608083019267ffffffffffffffff818510818611176102b65760c08201908111858210176102b65789528c84527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152516101769392918c91829182855af1610170610617565b9161069b565b80518a8115918215610292575b505090501561023d578798506001979697541690813b15610239578680946101d260a0988851998a978896879563791ac94760e01b8752860152606435602486015284015260a48301906105da565b306064830152608435608483015203925af19081156102305750610219575b5080808061021694610203478261076f565b5047905af1610210610617565b50610657565b80f35b6102238291610520565b61022d57386101f1565b80fd5b513d84823e3d90fd5b8680fd5b845162461bcd60e51b81528085018a9052602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e81850152691bdd081cdd58d8d9595960b21b6064820152608490fd5b83809293500103126102b25789015180151581036102b257808a38610183565b8880fd5b604189634e487b7160e01b6000525260246000fd5b865162461bcd60e51b81528087018c9052603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f818701527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b508651636eb1769f60e11b81523087820152602481018390528b818781855afa908115610393578b91610361575b50156100e3565b90508b81813d831161038c575b6103788183610566565b8101031261038757513861035a565b600080fd5b503d61036e565b88513d8d823e3d90fd5b6103bd91508b3d8d116103c3575b6103b58183610566565b8101906105bb565b386100c5565b503d6103ab565b87513d8c823e3d90fd5b8380fd5b5080fd5b50829060803660031901126105065781356001600160a01b0381811693859290918582036103d45761041761040f61050a565b92349061076f565b508451916104248361054a565b6002835285366020850137836020838754168851928380926315ab88c960e31b82525afa9081156104fc5786916104de575b508261046185610588565b911690528161046f846105ab565b91169052600154169047823b156104da576104af9386519788958694859363b6f9de9560e01b8552604435908501526080602485015260848401906105da565b906044830152606435606483015203925af190811561023057506104d1575080f35b61021690610520565b8480fd5b6104f6915060203d81116103c3576103b58183610566565b89610456565b87513d88823e3d90fd5b8280fd5b602435906001600160a01b038216820361038757565b67ffffffffffffffff811161053457604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761053457604052565b90601f8019910116810190811067ffffffffffffffff82111761053457604052565b8051156105955760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156105955760400190565b9081602091031261038757516001600160a01b03811681036103875790565b90815180825260208080930193019160005b8281106105fa575050505090565b83516001600160a01b0316855293810193928101926001016105ec565b3d15610652573d9067ffffffffffffffff82116105345760405191610646601f8201601f191660200184610566565b82523d6000602084013e565b606090565b1561065e57565b60405162461bcd60e51b81526020600482015260156024820152746661696c656420746f20636f6c6c6563742066656560581b6044820152606490fd5b919290156106fd57508151156106af575090565b3b156106b85790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156107105750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610756575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610733565b60008054604051630758dc5560e11b81526001600160a01b0393841660048201529192908116916020908181602481875afa908115610863578591610882575b5080860290868204148615171561086e578161271060049204946040519283809263792fa5ab60e11b82525afa9182156108635791849186938492610826575b5050828092610805958293165af1610210610617565b8203918211610812575090565b634e487b7160e01b81526011600452602490fd5b925092505081813d831161085c575b61083f8183610566565b810103126103d4575181811681036103d4578390839082806107ef565b503d610835565b6040513d87823e3d90fd5b634e487b7160e01b85526011600452602485fd5b90508181813d83116108a8575b6108998183610566565b810103126104da5751386107af565b503d61088f56fea26469706673582212208e8123b8475ce89015320153fc5dc42289579b3646f859ca063ce91d6f64ae5964736f6c63430008110033",
  "deployedBytecode": "0x60406080815260049081361015610020575b5050361561001e57600080fd5b005b600090813560e01c806312d4b07c146103dc5763b1f0d840146100435750610011565b346103d85760a03660031901126103d8576001600160a01b03833581811692908390036103d45761007261050a565b94604480358351946100838661054a565b6002865260209885368b8901378161009a88610588565b9116809152848a838b54168851928380926315ab88c960e31b82525afa9081156103ca578a9161039d575b50826100d0896105ab565b911690528160015416908315801561032c575b156102cb578651918b83019063095ea7b360e01b825260248401528486840152858352608083019267ffffffffffffffff818510818611176102b65760c08201908111858210176102b65789528c84527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152516101769392918c91829182855af1610170610617565b9161069b565b80518a8115918215610292575b505090501561023d578798506001979697541690813b15610239578680946101d260a0988851998a978896879563791ac94760e01b8752860152606435602486015284015260a48301906105da565b306064830152608435608483015203925af19081156102305750610219575b5080808061021694610203478261076f565b5047905af1610210610617565b50610657565b80f35b6102238291610520565b61022d57386101f1565b80fd5b513d84823e3d90fd5b8680fd5b845162461bcd60e51b81528085018a9052602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e81850152691bdd081cdd58d8d9595960b21b6064820152608490fd5b83809293500103126102b25789015180151581036102b257808a38610183565b8880fd5b604189634e487b7160e01b6000525260246000fd5b865162461bcd60e51b81528087018c9052603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f818701527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b508651636eb1769f60e11b81523087820152602481018390528b818781855afa908115610393578b91610361575b50156100e3565b90508b81813d831161038c575b6103788183610566565b8101031261038757513861035a565b600080fd5b503d61036e565b88513d8d823e3d90fd5b6103bd91508b3d8d116103c3575b6103b58183610566565b8101906105bb565b386100c5565b503d6103ab565b87513d8c823e3d90fd5b8380fd5b5080fd5b50829060803660031901126105065781356001600160a01b0381811693859290918582036103d45761041761040f61050a565b92349061076f565b508451916104248361054a565b6002835285366020850137836020838754168851928380926315ab88c960e31b82525afa9081156104fc5786916104de575b508261046185610588565b911690528161046f846105ab565b91169052600154169047823b156104da576104af9386519788958694859363b6f9de9560e01b8552604435908501526080602485015260848401906105da565b906044830152606435606483015203925af190811561023057506104d1575080f35b61021690610520565b8480fd5b6104f6915060203d81116103c3576103b58183610566565b89610456565b87513d88823e3d90fd5b8280fd5b602435906001600160a01b038216820361038757565b67ffffffffffffffff811161053457604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761053457604052565b90601f8019910116810190811067ffffffffffffffff82111761053457604052565b8051156105955760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156105955760400190565b9081602091031261038757516001600160a01b03811681036103875790565b90815180825260208080930193019160005b8281106105fa575050505090565b83516001600160a01b0316855293810193928101926001016105ec565b3d15610652573d9067ffffffffffffffff82116105345760405191610646601f8201601f191660200184610566565b82523d6000602084013e565b606090565b1561065e57565b60405162461bcd60e51b81526020600482015260156024820152746661696c656420746f20636f6c6c6563742066656560581b6044820152606490fd5b919290156106fd57508151156106af575090565b3b156106b85790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156107105750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610756575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610733565b60008054604051630758dc5560e11b81526001600160a01b0393841660048201529192908116916020908181602481875afa908115610863578591610882575b5080860290868204148615171561086e578161271060049204946040519283809263792fa5ab60e11b82525afa9182156108635791849186938492610826575b5050828092610805958293165af1610210610617565b8203918211610812575090565b634e487b7160e01b81526011600452602490fd5b925092505081813d831161085c575b61083f8183610566565b810103126103d4575181811681036103d4578390839082806107ef565b503d610835565b6040513d87823e3d90fd5b634e487b7160e01b85526011600452602485fd5b90508181813d83116108a8575b6108998183610566565b810103126104da5751386107af565b503d61088f56fea26469706673582212208e8123b8475ce89015320153fc5dc42289579b3646f859ca063ce91d6f64ae5964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapExactTokensForETH(address,address,uint256,uint256,uint256)": {
        "notice": "USER INTERFACE *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3245,
        "contract": "contracts/UniswapV2Adapter.sol:UniswapV2Adapter",
        "label": "_zimaRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IZimaRouter)3951"
      },
      {
        "astId": 3248,
        "contract": "contracts/UniswapV2Adapter.sol:UniswapV2Adapter",
        "label": "_router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Router02)4347"
      }
    ],
    "types": {
      "t_contract(IUniswapV2Router02)4347": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IZimaRouter)3951": {
        "encoding": "inplace",
        "label": "contract IZimaRouter",
        "numberOfBytes": "20"
      }
    }
  }
}