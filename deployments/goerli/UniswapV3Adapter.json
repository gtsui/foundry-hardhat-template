{
  "address": "0x80B45861f1b9d71CCf41089baA5610e39eBe45aE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zimaRouterAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapV3FactoryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouterAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x78a1501a31808dfc92bc95620bda9a6984c4ebab65504ed1360cf16d64d932ff",
  "receipt": {
    "to": null,
    "from": "0xAAAA8C5867f5c44B6025688F481B34514e09fd8d",
    "contractAddress": "0x80B45861f1b9d71CCf41089baA5610e39eBe45aE",
    "transactionIndex": 29,
    "gasUsed": "825276",
    "logsBloom": "0x
    "blockHash": "0x934447e04c16149635745bfbe4b493156682b86a3b067d9d49d22b975ae5c732",
    "transactionHash": "0x78a1501a31808dfc92bc95620bda9a6984c4ebab65504ed1360cf16d64d932ff",
    "logs": [],
    "blockNumber": 10236238,
    "cumulativeGasUsed": "4353507",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBd0E4dB286669f658E45100f60df9BfB9a4F3140",
    "0x1F98431c8aD98523631AE4a59f267346ea31F984",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "numDeployments": 1,
  "solcInputHash": "ebbd191994b94818d138f5d258bbc84a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zimaRouterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV3FactoryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapExactTokensForETH(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"USER INTERFACE *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Adapter.sol\":\"UniswapV3Adapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/UniswapV3Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/UniswapV3/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/UniswapV3/IUniswapV3Factory.sol\\\";\\nimport \\\"./interfaces/UniswapV3/IUniswapV3Pool.sol\\\";\\nimport \\\"./interfaces/IWETH/IWeth.sol\\\";\\nimport \\\"./interfaces/IAdapter.sol\\\";\\nimport \\\"./interfaces/IZimaRouter.sol\\\";\\n\\ncontract UniswapV3Adapter is IAdapter {\\n\\n  using SafeERC20 for IERC20;\\n\\n  IZimaRouter _zimaRouter;\\n  ISwapRouter _router;\\n  IUniswapV3Factory _factory;\\n    \\n  constructor(address zimaRouterAddr, address uniswapV3FactoryAddr, address swapRouterAddr) {\\n    _zimaRouter = IZimaRouter(zimaRouterAddr);\\n    _factory = IUniswapV3Factory(uniswapV3FactoryAddr);\\n    _router = ISwapRouter(swapRouterAddr);\\n  }\\n\\n  receive() external payable{}\\n\\n  modifier onlyZimaRouter() {\\n    require(msg.sender == address(_zimaRouter), \\\"only zima router\\\");\\n    _;\\n  }\\n  \\n  /** USER INTERFACE **/\\n\\n  function swapExactTokensForETH(\\n                                 address payable recipient,\\n                                 address tokenFrom,\\n                                 uint amountIn,\\n                                 uint amountOutMin,\\n                                 uint deadline,\\n                                 bytes memory data\\n                                 ) external onlyZimaRouter {\\n   \\n    // Assume that ZimaRouter has already transferred `tokenFrom` funds\\n    // to this address. Approve the router to spend this.\\n    IERC20(tokenFrom).safeApprove(address(_router), amountIn);\\n\\n    // Deserialize the pool address to retrieve fee\\n    (address poolAddr) = abi.decode(data, (address));\\n    uint24 fee = IUniswapV3Pool(poolAddr).fee();\\n    \\n    // Build the params\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n      tokenIn: tokenFrom,\\n      tokenOut: _zimaRouter.WETH(),\\n      fee: fee,\\n      recipient: address(this),\\n      deadline: deadline,\\n      amountIn: amountIn,\\n      amountOutMinimum: amountOutMin,\\n      sqrtPriceLimitX96: 0\\n      });\\n\\n    // Execute the swap\\n    _router.exactInputSingle(params);\\n\\n    // Uniwrap WETH to ETH\\n    IWETH WETH = IWETH(_zimaRouter.WETH());\\n    WETH.withdraw(WETH.balanceOf(address(this)));\\n\\n    // Collect the fee in ETH to `feeWallet` after executing swap\\n    _collectFee(recipient, address(this).balance);\\n\\n    // Send the full balance of eth to user\\n    (bool sent, ) = recipient.call{value: address(this).balance}(\\\"\\\");\\n    require(sent, \\\"failed to send balance to user\\\");\\n  }\\n  \\n  function swapExactETHForTokens(\\n                                 address recipient,\\n                                 address tokenTo,\\n                                 uint amountOutMin,\\n                                 uint deadline,\\n                                 bytes memory data\\n                                 ) external payable onlyZimaRouter {\\n    \\n    // Store the full ETH amount sent by `recipient`\\n    uint amount = msg.value;\\n    \\n    // Collect the fee in ETH to `feeWallet` before executing swap\\n    uint swapAmount = _collectFee(recipient, amount);\\n\\n    // Wrap ETH to WETH and approve xfer\\n    IWETH WETH = IWETH(_zimaRouter.WETH());\\n    WETH.deposit{value: swapAmount}();    \\n    WETH.approve(address(_router), swapAmount);\\n\\n    // Deserialize the pool address to retrieve fee\\n    address poolAddr = abi.decode(data, (address));\\n    uint24 fee = IUniswapV3Pool(poolAddr).fee();\\n    \\n    // Build the params\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n      tokenIn: address(WETH),\\n      tokenOut: tokenTo,\\n      fee: fee,\\n      recipient: recipient,\\n      deadline: deadline,\\n      amountIn: swapAmount,\\n      amountOutMinimum: amountOutMin,\\n      sqrtPriceLimitX96: 0\\n      });\\n\\n    // Execute the swap\\n    _router.exactInputSingle(params);\\n  }\\n  \\n  \\n  /** INTERNAL FUNCTIONS **/\\n\\n  function _getMostLiquidFeeTier(address token0, address token1) internal view returns(uint24) {\\n    uint24[] memory feeTiers = new uint24[](3);\\n    feeTiers[0] = 500;   // 0.05%\\n    feeTiers[1] = 3000;  // 0.3%\\n    feeTiers[2] = 10000; // 1%\\n    uint24 targetFeeTier = 0;\\n    uint128 highestLiq = 0;\\n\\n    for (uint i = 0; i < feeTiers.length; i++) {\\n      address poolAddr = _factory.getPool(token0, token1, feeTiers[i]);\\n      if (poolAddr != address(0)) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddr);\\n        uint128 liq = pool.liquidity();\\n        if (liq > highestLiq) {\\n          highestLiq = liq;\\n          targetFeeTier = feeTiers[i];\\n        }\\n      }\\n    }\\n\\n    return targetFeeTier;\\n  }\\n  \\n  function _collectFee(address recipient, uint ethAmount) internal returns(uint) {\\n    uint feeBps = _zimaRouter.feeBps(recipient);\\n    uint fee = ethAmount * feeBps / 10000;\\n    address payable feeWallet = _zimaRouter.feeWallet();\\n    (bool sent,) = feeWallet.call{value: fee}(\\\"\\\");\\n    require(sent, \\\"failed to collect fee\\\");\\n    return ethAmount - fee;\\n  }  \\n\\n  /// @notice Transfers token to sender if amount > 0\\n  /// @param token IERC20 token to transfer to sender\\n  /// @param amount Amount of token to transfer\\n  ///  @param recipient Address that will receive the tokens\\n  function _transfer(\\n                     IERC20 token,\\n                     uint256 amount,\\n                     address recipient\\n                     ) internal {\\n    if (amount > 0) {\\n      token.safeTransfer(recipient, amount);\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9a68ea2c7996b6b145ad0ebaa858c4462cdad3599291712972eb488760c5ff8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAdapter {\\n\\n  function swapExactTokensForETH(\\n                                 address payable recipient,\\n                                 address tokenTo,\\n                                 uint amountIn,\\n                                 uint amountOutMin,\\n                                 uint deadline,\\n                                 bytes memory data\\n                                 ) external;\\n  \\n  function swapExactETHForTokens(\\n                                 address recipient,\\n                                 address tokenTo,\\n                                 uint amountOutMin,\\n                                 uint deadline,\\n                                 bytes memory data\\n                                 ) external payable;\\n  \\n}\\n\",\"keccak256\":\"0xb20e6952a9cc5e016510af560dce3181a3162c6d6753150cbc6d6b3f750a170a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWETH/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH is IERC20 {\\n  /// @notice Deposit ether to get wrapped ether\\n  function deposit() external payable;\\n  \\n  /// @notice Withdraw wrapped ether to get ether\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0fb2c623bbb64437fea4ae5256fcb6f7065a202c1c2d4367711f7215706db37a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IZimaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IZimaRouter {\\n\\n  event AddAdapter(uint adapterId, address adapter);\\n  event SetFeeWallet(address feeWallet);\\n  event Swap(\\n             address indexed account,\\n             address tokenFrom,\\n             uint amountFrom,\\n             address tokenTo,\\n             uint amountTo\\n             );\\n  \\n  /** ACCESS CONTROL FUNCTIONS **/\\n  \\n  function __setFeeWallet(address payable feeWallet_) external;\\n  function __addAdapter(uint adapterId, address adapterAddr) external;\\n\\n  /** USER INTERFACE **/\\n\\n  function swapExactTokensForETH(\\n                                 uint adapterId,\\n                                 address payable recipient,\\n                                 address tokenFrom,\\n                                 uint amountIn,\\n                                 uint amountOutMin,\\n                                 uint deadline,\\n                                 bytes memory data\\n                                 ) external;\\n  \\n  function swapExactETHForTokens(\\n                                 uint adapterId,\\n                                 address recipient,\\n                                 address tokenTo,\\n                                 uint amountOutMin,\\n                                 uint deadline,\\n                                 bytes memory data\\n                                 ) external payable;\\n  \\n  /** VIEW FUNCTIONS **/\\n\\n  function WETH() external view returns(address);\\n  function feeBps(address user) external view returns(uint);\\n  function feeWallet() external view returns(address payable);\\n  \\n}\\n\",\"keccak256\":\"0x7c9a95e7b99870c0e44362d2c94886bf10cbe768e89ecd4ec7c1d43fd853e793\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/UniswapV3/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xe5931648ba5fdc7052aae2bb39e3063c3d05712c9e0a704b272940534ca87da2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/UniswapV3/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n  /// @notice Emitted when the owner of the factory is changed\\n  /// @param oldOwner The owner before the owner was changed\\n  /// @param newOwner The owner after the owner was changed\\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 The first token of the pool by address sort order\\n  /// @param token1 The second token of the pool by address sort order\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n                    address indexed token0,\\n                    address indexed token1,\\n                    uint24 indexed fee,\\n                    int24 tickSpacing,\\n                    address pool\\n                    );\\n\\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n  /// @param fee The enabled fee, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n  /// @notice Returns the current owner of the factory\\n  /// @dev Can be changed by the current owner via setOwner\\n  /// @return The address of the factory owner\\n  function owner() external view returns (address);\\n\\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n  /// @return The tick spacing\\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n  /// @param tokenA The contract address of either token0 or token1\\n  /// @param tokenB The contract address of the other token\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @return pool The pool address\\n  function getPool(\\n                   address tokenA,\\n                   address tokenB,\\n                   uint24 fee\\n                   ) external view returns (address pool);\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param fee The desired fee for the pool\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n  /// are invalid.\\n  /// @return pool The address of the newly created pool\\n  function createPool(\\n                      address tokenA,\\n                      address tokenB,\\n                      uint24 fee\\n                      ) external returns (address pool);\\n\\n  /// @notice Updates the owner of the factory\\n  /// @dev Must be called by the current owner\\n  /// @param _owner The new owner of the factory\\n  function setOwner(address _owner) external;\\n\\n  /// @notice Enables a fee amount with the given tickSpacing\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xeeb64d1c1aefb5f89be4044ac5cbfaef36e1f22968e23b3ac5231072104edd61\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/UniswapV3/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV3Pool {\\n\\n  function liquidity() external view returns(uint128);\\n  function fee() external view returns(uint24);\\n}\\n\",\"keccak256\":\"0x21c2166525e21ec0aab643ab9e32cabba330f6f2b784448942921a27b2a87e29\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080346100a057601f610d7c38819003918201601f19168301916001600160401b038311848410176100a5578084926060946040528339810103126100a057610047816100bb565b906100606040610059602084016100bb565b92016100bb565b60018060a01b0380928160018060a01b031995168560005416176000551683600254161760025516906001541617600155604051610cac90816100d08239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100a05756fe60406080815260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c80630f412df81461030657635d962c7d146100425750610010565b60a03660031901126103025781356001600160a01b03818116939084830361021f5761006c61083b565b9460843567ffffffffffffffff81116102fe5761008f6100a591369086016108d6565b9461009e848a5416331461091d565b3490610b19565b908288541696865180986315ab88c960e31b8252818760209b8c935afa9081156102f4579085918b916102c7575b501695863b156102b9578751630d0e30db60e41b81528a9081818981898d5af180156102bd576102a5575b50600154895163095ea7b360e01b81529087166001600160a01b03168882019081526020810187905290918b918391908290819060400103918c5af1801561029b5761015e8894938c93899361026e575b5083808251830101910161095c565b1689519384809263ddca3f4360e01b82525afa918a83156102635792866101ea9a9997959362ffffff938d9a989693610234575b508a519861019f8a610851565b8952168888015216878601526060850152606435608085015260a084015260443560c08401528760e0840152600154169087855180978195829463414bf38960e01b84528301610996565b03925af190811561022b57506101fe578280f35b813d8311610224575b6102118183610898565b8101031261021f5738808280f35b600080fd5b503d610207565b513d85823e3d90fd5b6102559193508a3d8c1161025c575b61024d8183610898565b81019061097b565b9138610192565b503d610243565b8951903d90823e3d90fd5b61028d90853d8711610294575b6102858183610898565b810190610a2d565b503861014f565b503d61027b565b89513d8d823e3d90fd5b6102ae90610884565b6102b95789386100fe565b8980fd5b8a513d84823e3d90fd5b6102e791508a3d8c116102ed575b6102df8183610898565b81019061095c565b386100d3565b503d6102d5565b88513d8c823e3d90fd5b8780fd5b8280fd5b50346103025760c0366003190112610302576001600160a01b03823581811692908390036108375761033661083b565b9267ffffffffffffffff9260443560a4358581116108335761035c839136908a016108d6565b9661036b828b5416331461091d565b1690826001541696811580156107bd575b1561075b57855163095ea7b360e01b60208083019182526001600160a01b039a909a16602480840191909152604480840186905283529998916103c0606482610898565b885192838a01908111848210176107495789528983527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648a8401525161041892918d91829182895af16104116109fd565b9086610a45565b805190888215928315610731575b505050156106dc57918891878561044886838f9998819051830101910161095c565b1688519485809263ddca3f4360e01b82525afa9283156106d25785936106b3575b508385541692875189818d816315ab88c960e31b988982525afa9081156106a9576104f99492878c959362ffffff938b9161068c575b508c51956104ac87610851565b865216858501521689830152306060830152608435608083015260a082015260643560c08201528560e082015284600154168b878a5180968195829463414bf38960e01b84528301610996565b03925af1801561068257908791610659575b5082845416918987518094819382525afa90811561063257839161063c575b5084516370a0823160e01b81523089820152911685828881845afa918215610632578392610603575b50803b156103025786839286519485938492632e1a7d4d60e01b84528c8401525af180156105f9576105e6575b5085808080936105904782610b19565b5047905af161059d6109fd565b50156105a7578480f35b5162461bcd60e51b815292830152601e908201527f6661696c656420746f2073656e642062616c616e636520746f207573657200006044820152606490fd5b6105f290969196610884565b9438610580565b83513d89823e3d90fd5b9091508581813d831161062b575b61061b8183610898565b8101031261030257519038610553565b503d610611565b85513d85823e3d90fd5b6106539150863d88116102ed576102df8183610898565b3861052a565b813d831161067b575b61066c8183610898565b8101031261030257853861050b565b503d610662565b86513d86823e3d90fd5b6106a39150873d89116102ed576102df8183610898565b3861049f565b89513d89823e3d90fd5b6106cb919350883d8a1161025c5761024d8183610898565b9138610469565b87513d87823e3d90fd5b855162461bcd60e51b8152808a01889052602a818a01527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6107419350820181019101610a2d565b388881610426565b634e487b7160e01b8e5260418d528b8efd5b855162461bcd60e51b81526020818b0152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b508551636eb1769f60e11b8152308a82015260248101899052602081604481875afa908115610829578b916107f4575b501561037c565b90506020813d8211610821575b8161080e60209383610898565b8101031261081d5751386107ed565b8a80fd5b3d9150610801565b87513d8d823e3d90fd5b8880fd5b8480fd5b602435906001600160a01b038216820361021f57565b610100810190811067ffffffffffffffff82111761086e57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161086e57604052565b90601f8019910116810190811067ffffffffffffffff82111761086e57604052565b67ffffffffffffffff811161086e57601f01601f191660200190565b81601f8201121561021f578035906108ed826108ba565b926108fb6040519485610898565b8284526020838301011161021f57816000926020809301838601378301015290565b1561092457565b60405162461bcd60e51b815260206004820152601060248201526f37b7363c903d34b6b0903937baba32b960811b6044820152606490fd5b9081602091031261021f57516001600160a01b038116810361021f5790565b9081602091031261021f575162ffffff8116810361021f5790565b91909160e06101008201938160018060a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b3d15610a28573d90610a0e826108ba565b91610a1c6040519384610898565b82523d6000602084013e565b606090565b9081602091031261021f5751801515810361021f5790565b91929015610aa75750815115610a59575090565b3b15610a625790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610aba5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610b00575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610add565b60008054604051630758dc5560e11b81526001600160a01b039384166004820152919290811691602091908281602481875afa908115610c2a578591610c49575b50808602908682041486151715610c35578261271060049204946040519283809263792fa5ab60e11b82525afa908115610c2a5785858194829483948491610c0d575b50165af1610ba96109fd565b5015610bd157508203918211610bbd575090565b634e487b7160e01b81526011600452602490fd5b6064906040519062461bcd60e51b8252600482015260156024820152746661696c656420746f20636f6c6c6563742066656560581b6044820152fd5b610c249150883d8a116102ed576102df8183610898565b38610b9d565b6040513d87823e3d90fd5b634e487b7160e01b85526011600452602485fd5b90508281813d8311610c6f575b610c608183610898565b81010312610837575138610b5a565b503d610c5656fea2646970667358221220f1160a71ba36238f5734221af45f30d95cce43fa628626761d2c8a3ce673803264736f6c63430008110033",
  "deployedBytecode": "0x60406080815260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c80630f412df81461030657635d962c7d146100425750610010565b60a03660031901126103025781356001600160a01b03818116939084830361021f5761006c61083b565b9460843567ffffffffffffffff81116102fe5761008f6100a591369086016108d6565b9461009e848a5416331461091d565b3490610b19565b908288541696865180986315ab88c960e31b8252818760209b8c935afa9081156102f4579085918b916102c7575b501695863b156102b9578751630d0e30db60e41b81528a9081818981898d5af180156102bd576102a5575b50600154895163095ea7b360e01b81529087166001600160a01b03168882019081526020810187905290918b918391908290819060400103918c5af1801561029b5761015e8894938c93899361026e575b5083808251830101910161095c565b1689519384809263ddca3f4360e01b82525afa918a83156102635792866101ea9a9997959362ffffff938d9a989693610234575b508a519861019f8a610851565b8952168888015216878601526060850152606435608085015260a084015260443560c08401528760e0840152600154169087855180978195829463414bf38960e01b84528301610996565b03925af190811561022b57506101fe578280f35b813d8311610224575b6102118183610898565b8101031261021f5738808280f35b600080fd5b503d610207565b513d85823e3d90fd5b6102559193508a3d8c1161025c575b61024d8183610898565b81019061097b565b9138610192565b503d610243565b8951903d90823e3d90fd5b61028d90853d8711610294575b6102858183610898565b810190610a2d565b503861014f565b503d61027b565b89513d8d823e3d90fd5b6102ae90610884565b6102b95789386100fe565b8980fd5b8a513d84823e3d90fd5b6102e791508a3d8c116102ed575b6102df8183610898565b81019061095c565b386100d3565b503d6102d5565b88513d8c823e3d90fd5b8780fd5b8280fd5b50346103025760c0366003190112610302576001600160a01b03823581811692908390036108375761033661083b565b9267ffffffffffffffff9260443560a4358581116108335761035c839136908a016108d6565b9661036b828b5416331461091d565b1690826001541696811580156107bd575b1561075b57855163095ea7b360e01b60208083019182526001600160a01b039a909a16602480840191909152604480840186905283529998916103c0606482610898565b885192838a01908111848210176107495789528983527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648a8401525161041892918d91829182895af16104116109fd565b9086610a45565b805190888215928315610731575b505050156106dc57918891878561044886838f9998819051830101910161095c565b1688519485809263ddca3f4360e01b82525afa9283156106d25785936106b3575b508385541692875189818d816315ab88c960e31b988982525afa9081156106a9576104f99492878c959362ffffff938b9161068c575b508c51956104ac87610851565b865216858501521689830152306060830152608435608083015260a082015260643560c08201528560e082015284600154168b878a5180968195829463414bf38960e01b84528301610996565b03925af1801561068257908791610659575b5082845416918987518094819382525afa90811561063257839161063c575b5084516370a0823160e01b81523089820152911685828881845afa918215610632578392610603575b50803b156103025786839286519485938492632e1a7d4d60e01b84528c8401525af180156105f9576105e6575b5085808080936105904782610b19565b5047905af161059d6109fd565b50156105a7578480f35b5162461bcd60e51b815292830152601e908201527f6661696c656420746f2073656e642062616c616e636520746f207573657200006044820152606490fd5b6105f290969196610884565b9438610580565b83513d89823e3d90fd5b9091508581813d831161062b575b61061b8183610898565b8101031261030257519038610553565b503d610611565b85513d85823e3d90fd5b6106539150863d88116102ed576102df8183610898565b3861052a565b813d831161067b575b61066c8183610898565b8101031261030257853861050b565b503d610662565b86513d86823e3d90fd5b6106a39150873d89116102ed576102df8183610898565b3861049f565b89513d89823e3d90fd5b6106cb919350883d8a1161025c5761024d8183610898565b9138610469565b87513d87823e3d90fd5b855162461bcd60e51b8152808a01889052602a818a01527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6107419350820181019101610a2d565b388881610426565b634e487b7160e01b8e5260418d528b8efd5b855162461bcd60e51b81526020818b0152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b508551636eb1769f60e11b8152308a82015260248101899052602081604481875afa908115610829578b916107f4575b501561037c565b90506020813d8211610821575b8161080e60209383610898565b8101031261081d5751386107ed565b8a80fd5b3d9150610801565b87513d8d823e3d90fd5b8880fd5b8480fd5b602435906001600160a01b038216820361021f57565b610100810190811067ffffffffffffffff82111761086e57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161086e57604052565b90601f8019910116810190811067ffffffffffffffff82111761086e57604052565b67ffffffffffffffff811161086e57601f01601f191660200190565b81601f8201121561021f578035906108ed826108ba565b926108fb6040519485610898565b8284526020838301011161021f57816000926020809301838601378301015290565b1561092457565b60405162461bcd60e51b815260206004820152601060248201526f37b7363c903d34b6b0903937baba32b960811b6044820152606490fd5b9081602091031261021f57516001600160a01b038116810361021f5790565b9081602091031261021f575162ffffff8116810361021f5790565b91909160e06101008201938160018060a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b3d15610a28573d90610a0e826108ba565b91610a1c6040519384610898565b82523d6000602084013e565b606090565b9081602091031261021f5751801515810361021f5790565b91929015610aa75750815115610a59575090565b3b15610a625790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610aba5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610b00575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610add565b60008054604051630758dc5560e11b81526001600160a01b039384166004820152919290811691602091908281602481875afa908115610c2a578591610c49575b50808602908682041486151715610c35578261271060049204946040519283809263792fa5ab60e11b82525afa908115610c2a5785858194829483948491610c0d575b50165af1610ba96109fd565b5015610bd157508203918211610bbd575090565b634e487b7160e01b81526011600452602490fd5b6064906040519062461bcd60e51b8252600482015260156024820152746661696c656420746f20636f6c6c6563742066656560581b6044820152fd5b610c249150883d8a116102ed576102df8183610898565b38610b9d565b6040513d87823e3d90fd5b634e487b7160e01b85526011600452602485fd5b90508281813d8311610c6f575b610c608183610898565b81010312610837575138610b5a565b503d610c5656fea2646970667358221220f1160a71ba36238f5734221af45f30d95cce43fa628626761d2c8a3ce673803264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapExactTokensForETH(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "USER INTERFACE *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3546,
        "contract": "contracts/UniswapV3Adapter.sol:UniswapV3Adapter",
        "label": "_zimaRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IZimaRouter)4445"
      },
      {
        "astId": 3549,
        "contract": "contracts/UniswapV3Adapter.sol:UniswapV3Adapter",
        "label": "_router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISwapRouter)4938"
      },
      {
        "astId": 3552,
        "contract": "contracts/UniswapV3Adapter.sol:UniswapV3Adapter",
        "label": "_factory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV3Factory)5021"
      }
    ],
    "types": {
      "t_contract(ISwapRouter)4938": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Factory)5021": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IZimaRouter)4445": {
        "encoding": "inplace",
        "label": "contract IZimaRouter",
        "numberOfBytes": "20"
      }
    }
  }
}